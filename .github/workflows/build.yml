name: Build

on: [push]

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Setup NuGet
      uses: nuget/setup-nuget@v1

    - name: Restore NuGet packages
      run: nuget restore DoTuna.sln

    - uses: microsoft/setup-msbuild@v1.3
    - run: msbuild DoTuna.sln /p:Configuration=Release

    - uses: actions/upload-artifact@v4
      with:
        name: DoTuna
        path: bin\Release\net48\DoTuna.exe

  test:
    runs-on: windows-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    - name: Setup NuGet
      uses: nuget/setup-nuget@v1
    - name: Restore NuGet packages
      run: nuget restore DoTuna.sln
    - uses: microsoft/setup-msbuild@v1.3
    - name: Build solution
      run: msbuild DoTuna.sln /p:Configuration=Release
    - name: Run tests
      uses: rusty-bender/vstest-action@main
      with:
        testAssembly: '**/DoTuna.Test.dll'

    - name: Upload test results (TRX)
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: TestResults/*.trx

    - name: Publish test results to GitHub Actions
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: .NET Test Results
        path: TestResults/*.trx
        reporter: dotnet-trx

  virus-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: DoTuna
        path: ./artifact

    - name: Calculate SHA256 of file
      id: hash
      run: |
        sha256sum ./artifact/DoTuna.exe | awk '{print $1}' > hash.txt
        echo "sha256=$(cat hash.txt)" >> $GITHUB_OUTPUT

    - name: Upload to VirusTotal
      run: |
        curl --request POST \
          --url https://www.virustotal.com/api/v3/files \
          --header "x-apikey: ${{ secrets.VT_API_KEY }}" \
          --form "file=@./artifact/DoTuna.exe" > vt_response.json

        cat vt_response.json

    - name: Wait for scan and get result
      run: |
        analysis_id=$(jq -r '.data.id' vt_response.json)
        echo "Analysis ID: $analysis_id"

        echo "Waiting for analysis to complete..."
        sleep 60  # 대기 시간은 필요에 따라 조절 가능

        curl --request GET \
          --url "https://www.virustotal.com/api/v3/analyses/$analysis_id" \
          --header "x-apikey: ${{ secrets.VT_API_KEY }}" > analysis_result.json

        cat analysis_result.json

    - name: Check for Alyac detection
      run: |
        file_id=$(jq -r '.meta.file_info.sha256' analysis_result.json)
        curl --request GET \
          --url "https://www.virustotal.com/api/v3/files/$file_id" \
          --header "x-apikey: ${{ secrets.VT_API_KEY }}" > file_report.json

        alyac_detected=$(jq -r '.data.attributes.last_analysis_results."ALYac".category' file_report.json)
        echo "ALYac Detection: $alyac_detected"

        if [ "$alyac_detected" == "malicious" ]; then
          echo "ALYac detected the file as malicious!"
          exit 1
        else
          echo "No detection by ALYac."
        fi
